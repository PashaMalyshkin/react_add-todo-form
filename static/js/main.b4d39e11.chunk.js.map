{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","userId","usersFromServer","find","App","useState","setTitle","userName","setUserName","visibleTodos","setTodos","isTitleValid","checkTitle","isUserNameValid","checkUserName","action","method","onSubmit","event","preventDefault","allTodoId","todoId","Math","max","selectedUser","newTodo","handleSubmit","type","placeholder","value","onChange","titleValue","target","userNameValue","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4d39e11.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { FormEvent, useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\n\nconst findUserById = (userId: number) => {\n  return usersFromServer.find(user => user.id === userId) || null;\n};\n\nconst todos = todosFromServer.map((todo) => {\n  return {\n    ...todo,\n    user: findUserById(todo.userId),\n  };\n});\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [userName, setUserName] = useState('');\n  const [visibleTodos, setTodos] = useState(todos);\n  const [isTitleValid, checkTitle] = useState(true);\n  const [isUserNameValid, checkUserName] = useState(true);\n  const handleTitle = (titleValue: string) => {\n    checkTitle(true);\n    setTitle(titleValue);\n  };\n\n  const handleUserName = (userNameValue: string) => {\n    checkUserName(true);\n    setUserName(userNameValue);\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!title) {\n      checkTitle(false);\n    }\n\n    if (!userName) {\n      checkUserName(false);\n    }\n\n    if (title && userName) {\n      const allTodoId = visibleTodos.map(todo => todo.id);\n      const todoId = Math.max(...allTodoId) + 1;\n\n      const selectedUser = usersFromServer\n        .find(user => user.name === userName) || null;\n\n      if (selectedUser) {\n        const newTodo: Todo = {\n          id: todoId,\n          title,\n          completed: false,\n          userId: selectedUser.id,\n          user: selectedUser,\n        };\n\n        setTodos([\n          ...visibleTodos,\n          newTodo,\n        ]);\n\n        setTitle('');\n        setUserName('');\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => handleSubmit(event)}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => handleTitle(event.target.value)}\n          />\n\n          {!isTitleValid && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userName}\n            onChange={(event) => handleUserName(event.target.value)}\n          >\n            <option value=\"\" disabled>\n              Choose a user\n            </option>\n\n            {usersFromServer.map((user) => (\n              <option key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {!isUserNameValid && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}